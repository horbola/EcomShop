/*
 * This file is generated by jOOQ.
 */
package com.saif.web.practice.shop.jooq.tables;


import com.saif.web.practice.shop.jooq.DefaultSchema;
import com.saif.web.practice.shop.jooq.Indexes;
import com.saif.web.practice.shop.jooq.Keys;
import com.saif.web.practice.shop.jooq.tables.records.SuppliersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Suppliers extends TableImpl<SuppliersRecord> {

    private static final long serialVersionUID = -841743185;

    /**
     * The reference instance of <code>Suppliers</code>
     */
    public static final Suppliers SUPPLIERS = new Suppliers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuppliersRecord> getRecordType() {
        return SuppliersRecord.class;
    }

    /**
     * The column <code>Suppliers.supplierID</code>.
     */
    public final TableField<SuppliersRecord, String> SUPPLIERID = createField(DSL.name("supplierID"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>Suppliers.shortName</code>.
     */
    public final TableField<SuppliersRecord, String> SHORTNAME = createField(DSL.name("shortName"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>Suppliers.fullName</code>.
     */
    public final TableField<SuppliersRecord, String> FULLNAME = createField(DSL.name("fullName"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>Suppliers.house</code>.
     */
    public final TableField<SuppliersRecord, String> HOUSE = createField(DSL.name("house"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>Suppliers.road</code>.
     */
    public final TableField<SuppliersRecord, String> ROAD = createField(DSL.name("road"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>Suppliers.area</code>.
     */
    public final TableField<SuppliersRecord, String> AREA = createField(DSL.name("area"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>Suppliers.thana</code>.
     */
    public final TableField<SuppliersRecord, String> THANA = createField(DSL.name("thana"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>Suppliers.district</code>.
     */
    public final TableField<SuppliersRecord, String> DISTRICT = createField(DSL.name("district"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * Create a <code>Suppliers</code> table reference
     */
    public Suppliers() {
        this(DSL.name("Suppliers"), null);
    }

    /**
     * Create an aliased <code>Suppliers</code> table reference
     */
    public Suppliers(String alias) {
        this(DSL.name(alias), SUPPLIERS);
    }

    /**
     * Create an aliased <code>Suppliers</code> table reference
     */
    public Suppliers(Name alias) {
        this(alias, SUPPLIERS);
    }

    private Suppliers(Name alias, Table<SuppliersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Suppliers(Name alias, Table<SuppliersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Suppliers(Table<O> child, ForeignKey<O, SuppliersRecord> key) {
        super(child, key, SUPPLIERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_SUPPLIERS_1, Indexes.SQLITE_AUTOINDEX_SUPPLIERS_2, Indexes.SQLITE_AUTOINDEX_SUPPLIERS_3);
    }

    @Override
    public UniqueKey<SuppliersRecord> getPrimaryKey() {
        return Keys.PK_SUPPLIERS;
    }

    @Override
    public List<UniqueKey<SuppliersRecord>> getKeys() {
        return Arrays.<UniqueKey<SuppliersRecord>>asList(Keys.PK_SUPPLIERS, Keys.SQLITE_AUTOINDEX_SUPPLIERS_2, Keys.SQLITE_AUTOINDEX_SUPPLIERS_3);
    }

    @Override
    public Suppliers as(String alias) {
        return new Suppliers(DSL.name(alias), this);
    }

    @Override
    public Suppliers as(Name alias) {
        return new Suppliers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(String name) {
        return new Suppliers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Suppliers rename(Name name) {
        return new Suppliers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
