/*
 * This file is generated by jOOQ.
 */
package com.saif.web.practice.shop.jooq.tables;


import com.saif.web.practice.shop.jooq.DefaultSchema;
import com.saif.web.practice.shop.jooq.Indexes;
import com.saif.web.practice.shop.jooq.Keys;
import com.saif.web.practice.shop.jooq.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = -352142336;

    /**
     * The reference instance of <code>Orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>Orders.customerID</code>.
     */
    public final TableField<OrdersRecord, String> CUSTOMERID = createField(DSL.name("customerID"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>Orders.orderID</code>.
     */
    public final TableField<OrdersRecord, Integer> ORDERID = createField(DSL.name("orderID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Orders.shippingAddressID</code>.
     */
    public final TableField<OrdersRecord, Integer> SHIPPINGADDRESSID = createField(DSL.name("shippingAddressID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Orders.billingAddressID</code>.
     */
    public final TableField<OrdersRecord, Integer> BILLINGADDRESSID = createField(DSL.name("billingAddressID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Orders.deliveryMethod</code>.
     */
    public final TableField<OrdersRecord, Integer> DELIVERYMETHOD = createField(DSL.name("deliveryMethod"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Orders.paymentMethod</code>.
     */
    public final TableField<OrdersRecord, Integer> PAYMENTMETHOD = createField(DSL.name("paymentMethod"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Orders.supplierID</code>.
     */
    public final TableField<OrdersRecord, String> SUPPLIERID = createField(DSL.name("supplierID"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>Orders.productID</code>.
     */
    public final TableField<OrdersRecord, String> PRODUCTID = createField(DSL.name("productID"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>Orders.price</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.NUMERIC(9, 2).nullable(false), this, "");

    /**
     * The column <code>Orders.quantity</code>.
     */
    public final TableField<OrdersRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Orders.placed</code>.
     */
    public final TableField<OrdersRecord, Date> PLACED = createField(DSL.name("placed"), org.jooq.impl.SQLDataType.DATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("current", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>Orders.status</code>.
     */
    public final TableField<OrdersRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>Orders</code> table reference
     */
    public Orders() {
        this(DSL.name("Orders"), null);
    }

    /**
     * Create an aliased <code>Orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>Orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_ORDERS_1);
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.PK_ORDERS;
    }

    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.PK_ORDERS);
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, Integer, Integer, Integer, Integer, Integer, String, String, BigDecimal, Integer, Date, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
