/*
 * This file is generated by jOOQ.
 */
package com.saif.web.practice.shop.jooq.tables;


import com.saif.web.practice.shop.jooq.DefaultSchema;
import com.saif.web.practice.shop.jooq.Keys;
import com.saif.web.practice.shop.jooq.tables.records.CustomerproductsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerproducts extends TableImpl<CustomerproductsRecord> {

    private static final long serialVersionUID = -1481918936;

    /**
     * The reference instance of <code>CustomerProducts</code>
     */
    public static final Customerproducts CUSTOMERPRODUCTS = new Customerproducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerproductsRecord> getRecordType() {
        return CustomerproductsRecord.class;
    }

    /**
     * The column <code>CustomerProducts.customerID</code>.
     */
    public final TableField<CustomerproductsRecord, String> CUSTOMERID = createField(DSL.name("customerID"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.orderID</code>.
     */
    public final TableField<CustomerproductsRecord, Integer> ORDERID = createField(DSL.name("orderID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CustomerProducts.supplierID</code>.
     */
    public final TableField<CustomerproductsRecord, String> SUPPLIERID = createField(DSL.name("supplierID"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.productID</code>.
     */
    public final TableField<CustomerproductsRecord, String> PRODUCTID = createField(DSL.name("productID"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.type</code>.
     */
    public final TableField<CustomerproductsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.domain</code>.
     */
    public final TableField<CustomerproductsRecord, String> DOMAIN = createField(DSL.name("domain"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.kingdom</code>.
     */
    public final TableField<CustomerproductsRecord, String> KINGDOM = createField(DSL.name("kingdom"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.phylum</code>.
     */
    public final TableField<CustomerproductsRecord, String> PHYLUM = createField(DSL.name("phylum"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.klass</code>.
     */
    public final TableField<CustomerproductsRecord, String> KLASS = createField(DSL.name("klass"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.orderr</code>.
     */
    public final TableField<CustomerproductsRecord, String> ORDERR = createField(DSL.name("orderr"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.family</code>.
     */
    public final TableField<CustomerproductsRecord, String> FAMILY = createField(DSL.name("family"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.genus</code>.
     */
    public final TableField<CustomerproductsRecord, String> GENUS = createField(DSL.name("genus"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.species</code>.
     */
    public final TableField<CustomerproductsRecord, String> SPECIES = createField(DSL.name("species"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.shortDescrip</code>.
     */
    public final TableField<CustomerproductsRecord, String> SHORTDESCRIP = createField(DSL.name("shortDescrip"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.longDescrip</code>.
     */
    public final TableField<CustomerproductsRecord, String> LONGDESCRIP = createField(DSL.name("longDescrip"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>CustomerProducts.size</code>.
     */
    public final TableField<CustomerproductsRecord, Integer> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CustomerProducts.color</code>.
     */
    public final TableField<CustomerproductsRecord, String> COLOR = createField(DSL.name("color"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.style</code>.
     */
    public final TableField<CustomerproductsRecord, String> STYLE = createField(DSL.name("style"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>CustomerProducts.weight</code>.
     */
    public final TableField<CustomerproductsRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CustomerProducts.price</code>.
     */
    public final TableField<CustomerproductsRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.NUMERIC(9, 2).nullable(false), this, "");

    /**
     * The column <code>CustomerProducts.quantity</code>.
     */
    public final TableField<CustomerproductsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>CustomerProducts</code> table reference
     */
    public Customerproducts() {
        this(DSL.name("CustomerProducts"), null);
    }

    /**
     * Create an aliased <code>CustomerProducts</code> table reference
     */
    public Customerproducts(String alias) {
        this(DSL.name(alias), CUSTOMERPRODUCTS);
    }

    /**
     * Create an aliased <code>CustomerProducts</code> table reference
     */
    public Customerproducts(Name alias) {
        this(alias, CUSTOMERPRODUCTS);
    }

    private Customerproducts(Name alias, Table<CustomerproductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerproducts(Name alias, Table<CustomerproductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customerproducts(Table<O> child, ForeignKey<O, CustomerproductsRecord> key) {
        super(child, key, CUSTOMERPRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<ForeignKey<CustomerproductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerproductsRecord, ?>>asList(Keys.FK_CUSTOMERPRODUCTS_CUSTOMERS_1);
    }

    public Customers customers() {
        return new Customers(this, Keys.FK_CUSTOMERPRODUCTS_CUSTOMERS_1);
    }

    @Override
    public Customerproducts as(String alias) {
        return new Customerproducts(DSL.name(alias), this);
    }

    @Override
    public Customerproducts as(Name alias) {
        return new Customerproducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerproducts rename(String name) {
        return new Customerproducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerproducts rename(Name name) {
        return new Customerproducts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, Integer, String, String, Integer, BigDecimal, Integer> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
