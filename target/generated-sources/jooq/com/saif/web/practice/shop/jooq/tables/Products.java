/*
 * This file is generated by jOOQ.
 */
package com.saif.web.practice.shop.jooq.tables;


import com.saif.web.practice.shop.jooq.DefaultSchema;
import com.saif.web.practice.shop.jooq.Indexes;
import com.saif.web.practice.shop.jooq.Keys;
import com.saif.web.practice.shop.jooq.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1848566257;

    /**
     * The reference instance of <code>Products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>Products.supplierID</code>.
     */
    public final TableField<ProductsRecord, String> SUPPLIERID = createField(DSL.name("supplierID"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>Products.productID</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTID = createField(DSL.name("productID"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>Products.domain</code>.
     */
    public final TableField<ProductsRecord, String> DOMAIN = createField(DSL.name("domain"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>Products.kingdom</code>.
     */
    public final TableField<ProductsRecord, String> KINGDOM = createField(DSL.name("kingdom"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.phylum</code>.
     */
    public final TableField<ProductsRecord, String> PHYLUM = createField(DSL.name("phylum"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.klass</code>.
     */
    public final TableField<ProductsRecord, String> KLASS = createField(DSL.name("klass"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.orderr</code>.
     */
    public final TableField<ProductsRecord, String> ORDERR = createField(DSL.name("orderr"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.family</code>.
     */
    public final TableField<ProductsRecord, String> FAMILY = createField(DSL.name("family"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.genus</code>.
     */
    public final TableField<ProductsRecord, String> GENUS = createField(DSL.name("genus"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.species</code>.
     */
    public final TableField<ProductsRecord, String> SPECIES = createField(DSL.name("species"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.shortDescrip</code>.
     */
    public final TableField<ProductsRecord, String> SHORTDESCRIP = createField(DSL.name("shortDescrip"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>Products.longDescrip</code>.
     */
    public final TableField<ProductsRecord, String> LONGDESCRIP = createField(DSL.name("longDescrip"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>Products.size</code>.
     */
    public final TableField<ProductsRecord, Integer> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Products.color</code>.
     */
    public final TableField<ProductsRecord, String> COLOR = createField(DSL.name("color"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.style</code>.
     */
    public final TableField<ProductsRecord, String> STYLE = createField(DSL.name("style"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>Products.weight</code>.
     */
    public final TableField<ProductsRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Products.price</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.NUMERIC(9, 2).nullable(false), this, "");

    /**
     * The column <code>Products.stock</code>.
     */
    public final TableField<ProductsRecord, Integer> STOCK = createField(DSL.name("stock"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Products.quantity</code>.
     */
    public final TableField<ProductsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Products.arrived</code>.
     */
    public final TableField<ProductsRecord, Date> ARRIVED = createField(DSL.name("arrived"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>Products.path</code>.
     */
    public final TableField<ProductsRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>Products</code> table reference
     */
    public Products() {
        this(DSL.name("Products"), null);
    }

    /**
     * Create an aliased <code>Products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>Products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Products(Table<O> child, ForeignKey<O, ProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_PRODUCTS_1);
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PK_PRODUCTS;
    }

    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.PK_PRODUCTS);
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductsRecord, ?>>asList(Keys.FK_PRODUCTS_SUPPLIERS_1);
    }

    public Suppliers suppliers() {
        return new Suppliers(this, Keys.FK_PRODUCTS_SUPPLIERS_1);
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, String, String, String, Integer, String, String, Integer, BigDecimal, Integer, Integer, Date, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
